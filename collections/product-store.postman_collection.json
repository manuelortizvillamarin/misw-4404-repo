{
	"info": {
		"_postman_id": "62a8428e-bdb0-4311-995b-1c243e3b67ab",
		"name": "product-store",
		"description": "Buy or rent spacecrafts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23045853"
	},
	"item": [
		{
			"name": "Add store to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "Associate a store to a product"
			},
			"response": [
				{
					"name": "Add store to a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n  \"id\": \"1\",\r\n  \"name\": \"Product #1\",\r\n  \"price\": \"100\",\r\n  \"type\": \"Perecedero\",\r\n  \"stores\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"name\": \"Store #!\",\r\n      \"city\": \"BOG\",\r\n      \"address\": \"Address\"\r\n    }\r\n  ]\r\n}"
				}
			]
		},
		{
			"name": "Add a non existing store to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "Show the API response when associating a non existing store to a product"
			},
			"response": [
				{
					"name": "Add a non existing store to a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The store with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Add store to a non existing product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "See the API response when associating a store to a non existing product"
			},
			"response": [
				{
					"name": "Add a store to a non existing product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/00000000-0000-0000-0000-000000000000/{{productId}}/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"00000000-0000-0000-0000-000000000000",
								"{{productId}}",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The product with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Get stores from a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores"
					]
				},
				"description": "Get the list of stores associated to a product"
			},
			"response": [
				{
					"name": "Get stores from a product",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"1\",\n        \"name\": \"Store #!\",\n        \"city\": \"BOG\",\n        \"address\": \"Address\"\n    },\n    {\n        \"id\": \"2\",\n        \"name\": \"Store #2\",\n        \"city\": \"MED\",\n        \"address\": \"Address\"\n    },\n    {\n        \"id\": \"3\",\n        \"name\": \"Store #3\",\n        \"city\": \"CLO\",\n        \"address\": \"Address\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get stores from a not valid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores"
					]
				},
				"description": "See the API response when getting the list of stores and using a not valid product"
			},
			"response": [
				{
					"name": "Get stores from a not valid product",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a store from a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "Get an specific store associated to a product"
			},
			"response": [
				{
					"name": "Get a store from a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n  \"id\": \"1\",\r\n  \"name\": \"Store #!\",\r\n  \"city\": \"BOG\",\r\n  \"address\": \"Address\"\r\n}"
				}
			]
		},
		{
			"name": "Get a store from a product using a not valid store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "See the API response when getting an specific store and using a not valid store"
			},
			"response": [
				{
					"name": "Get store from a product using a not valid store",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The store with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Get a store from a product using a not valid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "See the API response when getting an specific store and using a not valid product"
			},
			"response": [
				{
					"name": "Get store from a product using a not valid product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The product with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Update stores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"9095a04d-c739-4e55-b1a9-f011e1351194\",\r\n        \"name\": \"Store #1 Updated Again\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"Address\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores"
					]
				},
				"description": "Update the stores associated to a product"
			},
			"response": [
				{
					"name": "Update stores of a product",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": \"1\",\r\n        \"name\": \"Store #1 Updated\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"Address\"\r\n    },\r\n    {\r\n        \"id\": \"2\",\r\n        \"name\": \"Store #2 Updated\",\r\n        \"city\": \"MED\",\r\n        \"address\": \"Address\"\r\n    },\r\n    {\r\n        \"id\": \"3\",\r\n        \"name\": \"Store #3 Updated\",\r\n        \"city\": \"CLO\",\r\n        \"address\": \"Address\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\n  \"id\": \"1\",\n  \"name\": \"Product #1\",\n  \"price\": \"100\",\n  \"type\": \"Perecedero\",\n  \"stores\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Store #1 Updated\",\n      \"city\": \"BOG\",\n      \"address\": \"Address\"\n    },\n    {\n      \"id\": \"2\",\n      \"name\": \"Store #2 Updated\",\n      \"city\": \"MED\",\n      \"address\": \"Address\"\n    },\n    {\n      \"id\": \"3\",\n      \"name\": \"Store #3 Updated\",\n      \"city\": \"CLO\",\n      \"address\": \"Address\"\n    }\n  ]\n}"
				}
			]
		},
		{
			"name": "Update stores of a product using a not valid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"9095a04d-c739-4e55-b1a9-f011e1351194\",\r\n        \"name\": \"Store #1 Updated Again\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"Address\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores"
					]
				},
				"description": "See the API response when updating the list of stores of a product and using a not valid product"
			},
			"response": [
				{
					"name": "Update stores of a product using a not valid product",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": \"1\",\r\n        \"name\": \"Store #1 Updated\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"Address\"\r\n    },\r\n    {\r\n        \"id\": \"2\",\r\n        \"name\": \"Store #2 Updated\",\r\n        \"city\": \"MED\",\r\n        \"address\": \"Address\"\r\n    },\r\n    {\r\n        \"id\": \"3\",\r\n        \"name\": \"Store #3 Updated\",\r\n        \"city\": \"CLO\",\r\n        \"address\": \"Address\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update stores of a product using a not valid store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"name\": \"Store #1 Updated Once Again\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"Address\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores"
					]
				},
				"description": "See the API response when updating the list of stores associated to a product and using a not valid store"
			},
			"response": [
				{
					"name": "Update stores of a product using a not valid store",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"name\": \"Store #1 Updated\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"Address\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a store from a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "Delete a store associated to a product"
			},
			"response": [
				{
					"name": "Delete a store from a product",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a store from a product using a not valid store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "See the API response when deleting a store associated to a product using a not valid store"
			},
			"response": [
				{
					"name": "Delete a store from a product using a not valid store",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The store with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Delete a store from a product using a not valid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "See the API response when deleting a store associated to a product and using a not valid product"
			},
			"response": [
				{
					"name": "Delete a store from a product using a not valid store",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The product with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Delete a store from a product when store is not associated to the product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id is not associated to the product\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				},
				"description": "See the API response when deleting a store associated to a product using a store not associated to the product"
			},
			"response": [
				{
					"name": "Delete a store from a product when store is not associated to the product",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}",
								"stores",
								"{{storeId}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The store with the given id is not associated to the product\"\r\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}